{{
  const { globalMeta, importContent, contentArray, $path, $root } = Abell;

  const GlobalCSS = require('./static/styles/inlined/global.css.abell');
  const Navigation = require('./components/Navigation.abell');
  const Footer = require('./components/Footer.abell');
  
  const process = require('process');
  require('dotenv').config()
}}

<!DOCTYPE html>
<html lang="en">
<head>
  <!-- Global site tag (gtag.js) - Google Analytics -->
  <script async src="https://www.googletagmanager.com/gtag/js?id=UA-125454191-5"></script>
  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());

    gtag('config', 'UA-125454191-5');
  </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />

  <meta name="description" content="Abell - a JavaScript based static site generator to create markdown and configuration based websites"/>
  <link rel="shortcut icon" href="./favicon.ico" type="image/x-icon" />

  <!-- OPEN GRAPH -->
  <meta property="og:type" content="website" />
  <meta property="og:title" content="Abell Documentation" />
  <meta name="og:description" content="Abell - a JavaScript based static site generator to create markdown and configuration based websites"/>
  <meta property="og:url" content="https://abelljs.org" />
  
  <meta name="twitter:card" content="summary_large_image"/>
  <meta name="twitter:creator" content="@AbellLand"/>

  <meta property="og:image:secure_url" itemprop="image" content="https://res.cloudinary.com/saurabhdaware/image/upload/c_scale,w_600/v1591474179/abell/docs-og.png"/>
  <meta property="og:image" itemprop="image" content="https://res.cloudinary.com/saurabhdaware/image/upload/c_scale,w_600/v1591474179/abell/docs-og.png"/>
  <meta property="og:image:width" content="600" />
  <meta property="og:image:height" content="300" />
  <meta property="og:image:alt" content="OG image of Abell Docs that shows the title of page" />
  <meta property="og:description" content="Abell - a JavaScript based static site generator to create markdown and configuration based websites" />
  <meta property="og:site_name" content="abelljs.org"/>
  <meta http-equiv="X-UA-Compatible" content="ie=edge"/>

  <link href="https://fonts.googleapis.com/css2?family=Roboto+Condensed&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="./static/styles/index.css">
  <title>Abell - a JavaScript based static site generator to create markdown and configuration based websites</title>
  
  <!-- global css file -->
  <GlobalCSS/>

  <style>
  .issue-card {
    margin: 20px 0px;
    padding: 2px 30px 20px 30px;
    background-color: var(--elevation-background);
  }
  .issue-card p {
    margin: 8px 0px;
  }
  .issue-card > h3 {
    margin-bottom: 8px !important;
  }

  .issue-labels .label {
    background-color: var(--font-color-primary);
    color: var(--background-primary);
    padding: 2px 7px;
    display: inline-block;
    margin-right: 10px;
    font-size: smaller;
    border-radius: 3px;
  }
  </style>
</head>
<body class="index">
  <Navigation 
    props={
      contentArray, 
      navMenuOrder: globalMeta.navMenuOrder,
      $path: '', 
      $root,
      version: globalMeta.version
    }
  />
  <main>
    <h1>Abell Issue Finder</h1>
    <p>Hey everyone! This page is to help developers find issues in the overall Abell project.</p> 
    
    <p>
      This project includes issues from multiple repositories like
      <ul> 
        <li>abelljs/abell (Static Site Generator)</li>
        <li>abelljs/abell-renderer (Template Engine)</li> 
        <li>abelljs/create-abell-app (CLI)</li> 
        <li>abelljs/vscode-abell-language-features (VSCode Extension)</li>
        <li>abelljs/abell-website (This Website)</li> 
      </ul>
    </p>

    <section>
      <div id="issue-container"></div>
    </section>
  </main>
  <Footer/>
</body>
<script>
  let repos;
  function loadGithubIssues({definedLabel, res}) {
    repos = res.data;
    let issueCards = `Showing issues with "${definedLabel}" label`;
    for (const repoName of Object.keys(repos)) {
      const issues = repos[repoName].issues.edges;
      for (const issue of issues) {
        issueCards += `
          <div class="issue-card shadow">
            <h3>${issue.node.title}</h3>
            <div class="issue-labels">
              ${
                issue.node.labels.nodes
                  .map(label => `<span class="label">${label.name}</span>`)
                  .join('')
              }
            </div>
            <div style="padding: 5px 0px;">
              <p>Repo: <b>${repoName}</b></p>
              <p><a href="${issue.node.url}">View on GitHub</a></p>
            </div>
          </div>
        `
      }
    }

    document.querySelector('#issue-container').innerHTML = issueCards;
  }

  function fetchIssues(label) {
    let repoQueryString = '';
    const findIssues = (repoName) => `
      repository(name: "${repoName}", owner: "abelljs") {
        name
        issues(last: 100, orderBy: {field: CREATED_AT, direction: DESC}, filterBy: {labels: "${label}", states: OPEN}) {
          edges {
            node {
              title
              url
              labels(first: 10) {
                nodes {
                  name
                }
              }
            }
          }
          totalCount
        }
      }
    `;

    return fetch('https://api.github.com/graphql', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `bearer {{ process.env.GITHUB_TOKEN }}`
      },
      body: JSON.stringify({query: `
        query {
          abell: ${findIssues('abell')}
          abellRenderer: ${findIssues('abell-renderer')}
          createAbellApp: ${findIssues('create-abell-app')}
          abellWebsite: ${findIssues('abell-website')}
          vscodeAbellLanguageFeatures: ${findIssues('vscode-abell-language-features')}
        }
      `})
    })
    .then(res => res.json())
    .then(res => {
      return {
        definedLabel: label,
        res
      }
    })
  }

  const label = location.search.slice(location.search.indexOf('label=') + 6);
  fetchIssues(label || 'Hacktoberfest')
    .then(loadGithubIssues)
</script>
</html>