<AbellComponent>
{{
  const routes = require('./routes.js');
  const { $root, $path } = props;

  function renderRoutes(routesObj, isChild = false) {
    const renderedLi = Object.entries(routesObj).map((route) => {
      const isDirectPath = typeof route[1] === 'string';
      let isActive = isDirectPath && !isChild && route[1].includes($path);

      if (!isDirectPath) {
        isActive = route[1].path.includes($path);
      }

      return /* html */ `
        <li>
          <a 
            class="menu-item ${isActive ? 'active' : ''}" 
            href="${isDirectPath ? route[1] : route[1].path}"
          >
            ${route[0]}
          </a>
          ${
            isDirectPath
            ? ''
            : isActive ? renderRoutes(route[1].routes, true) : ''
          }
        </li>
      `})
      .join('');

    return '<ul>' + renderedLi + '</ul>'
  }
}}

<template>
  <nav class="dark-transition" data-transit-props="background-color, border">
    {{ renderRoutes(routes) }}   
  </nav>
</template>

<style>
  nav {
    position: fixed;
    left: 0px;
    top: 0px;
    z-index: 1;
    padding-top: 100px;
    height: 100%;
    border-right: 1px solid var(--elevation-2);
    width: 260px;
  }

  nav a.menu-item {
    display: block;
    padding: 8px 20px;
    text-decoration: none;
    color: var(--font-primary);
  }

  nav a.menu-item.active {
    color: var(--sidebar-active-link);
    font-weight: bold;
  }

  ul {
    list-style: none;
    padding-left: 0px;
  }

  li {
    font-size: 1.1rem;
  }

  li li {
    font-size: 1rem;
    display: flex;
  }

  li li::before {
    content: '- ';
    padding-left: 12px;
    font-size: larger;
    padding-top: 2px;
    color: var(--link-color);
  }

  li li a.menu-item {
    padding: 5px 8px;
    opacity: .9;
  }

  body.dark-dim nav a.menu-item:hover {
    color: #fff;
    transition: color .2s ease;
  }


  @media (max-width: 768px) {
    nav {
      display: none;
    }
  }
</style>
</AbellComponent>